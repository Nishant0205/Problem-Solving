class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int time = 0, freshct = 0;
        int m = grid.size(), n = grid[0].size();
        queue<vector<int>> q;
        
        for(int i=0; i<m; i++)
            for(int j=0; j<n; j++)
            {   
                if(grid[i][j] == 2)
                    q.push({0,i,j});
                else if(grid[i][j] == 1)
                    freshct++;
            }

        while(!q.empty())
        {
            time = q.front()[0];
            int cx = q.front()[1];
            int cy = q.front()[2];
            q.pop();
            if(cx+1 < m && grid[cx+1][cy] == 1)
            {
                grid[cx + 1][cy] = 2;
                freshct--;
                q.push({time+1,cx+1,cy}); 
            }
            if(cx-1 >= 0 && grid[cx-1][cy] == 1)
            {
                grid[cx - 1][cy] = 2;
                freshct--;
                q.push({time+1,cx-1,cy}); 
            }
            if(cy+1 < n && grid[cx][cy + 1] == 1)
            {
                grid[cx][cy + 1] = 2;
                freshct--;
                q.push({time+1,cx,cy+1}); 
            }
            if(cy-1 >= 0 && grid[cx][cy-1] == 1)
            {
                grid[cx][cy-1] = 2;
                freshct--;
                q.push({time+1,cx,cy-1}); 
            }
        }
        if(freshct == 0)
            return time;
        return -1;
        
    }
};
