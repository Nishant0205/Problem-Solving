// memoization
class Solution {
public:
    vector<vector<int>> dp;

    int minHealth(int r, int c, vector<vector<int>>& dungeon){
      int n=dungeon.size(), m=dungeon[0].size();
      if(r==n or c==m) return 1e9;
      if(r==n-1 and c==m-1){
        return (dungeon[n-1][m-1] < 0) ? 1-dungeon[n-1][m-1] : 1;
      }

      if(dp[r][c] != 1e9) return dp[r][c];
      int minHeallthThruRight = minHealth(r, c+1, dungeon);
      int minHealthThruDown = minHealth(r+1, c, dungeon);
      int cur_reqd = min(minHeallthThruRight,minHealthThruDown) - dungeon[r][c];
      return dp[r][c] = (cur_reqd) <= 0 ? 1 : cur_reqd;
    }
    
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
      int n=dungeon.size(), m=dungeon[0].size();
      dp = vector<vector<int>> (n+1, vector<int>(m+1, 1e9));
      return minHealth(0,0,dungeon);
    }
};

//space optmization
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
      int n=dungeon.size(), m=dungeon[0].size();
      vector<vector<int>> dp(n+1, vector<int>(m+1, 1e9));
      dp[n-1][m-1] = (dungeon[n-1][m-1] <= 0) ? 1 - dungeon[n-1][m-1] : 1;
    
      for(int r=n-1;r>=0;r--){
        for(int c=m-1;c>=0;c--){
          if(r==n-1 and c==m-1) continue;
          int cur_reqd = min(dp[r][c+1], dp[r+1][c]) - dungeon[r][c];
          dp[r][c] = (cur_reqd <= 0) ? 1 : cur_reqd;
        }
      }
      return dp[0][0];
    }
};

//bs
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        const int INF = 1e4;
        const int m = dungeon.size(), n = dungeon[0].size();
        int l = 1, r = INF;
        while(l <= r) {
            int mid = (l+r) / 2;
            int dp[m][n];
            dp[0][0] = mid + dungeon[0][0];
            if(dp[0][0] <= 0) dp[0][0] = -INF;
            for(int i = 1; i < m; i++) {
                dp[i][0] = dp[i-1][0] + dungeon[i][0];

                if(dp[i][0] <= 0) dp[i][0] = -INF;
            }
            for(int j = 1; j < n; j++) {
                dp[0][j] = dp[0][j-1] + dungeon[0][j];

                if(dp[0][j] <= 0) dp[0][j] = -INF;
            }
            for(int i = 1; i < m; i++) {
                for(int j = 1; j < n; j++) {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + dungeon[i][j];
                    if(dp[i][j] <= 0) dp[i][j] = -INF;
                }
            }
            if(dp[m-1][n-1] > 0)  r = mid-1;
            else l = mid+1;
        }
        return r+1;
    }
};
