class Solution {
    void count(vector<vector<char>>& grid, int cr, int cc, int& m, int& n,vector<vector<bool>>& vis)
    {
        if(cr>=m || cc>=n || cr==-1 || cc==-1)
            return;
        vis[cr][cc]=1;
        if(cr+1<m)
            if(grid[cr+1][cc]=='1' && vis[cr+1][cc] == 0)
                count(grid,cr+1,cc,m,n,vis);
        if(cr-1>=0)
            if(grid[cr-1][cc]=='1' && vis[cr-1][cc] == 0)
                count(grid,cr-1,cc,m,n,vis);
        if(cc+1<n)
            if(grid[cr][cc+1]=='1' && vis[cr][cc+1] == 0)
                count(grid,cr,cc+1,m,n,vis);
        if(cc-1>=0)
            if(grid[cr][cc-1]=='1' && vis[cr][cc-1] == 0)
                count(grid,cr,cc-1,m,n,vis);
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<bool>> vis(m, vector<bool> (n,0));
        int ct=0;
        for(int i=0; i<m; i++)
            for(int j=0; j<n; j++)
                if(grid[i][j]=='1' && vis[i][j]==0)
                {
                    ct++;
                    count(grid,i,j,m,n,vis);
                }
        return ct;
    }
};
