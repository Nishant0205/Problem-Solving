//memoization
class Solution {
public:
    int solve(string &text1, string &text2, int m, int n, vector<vector<int>> &memo) {
        if(m==0||n==0) {
            return 0;
        }
        if(memo[m][n] != -1) {
            return memo[m][n];
        }
        if(text1[m-1]==text2[n-1]){
            memo[m][n]=1+solve(text1, text2, m - 1, n - 1, memo);
        } 
        else{
            memo[m][n] = max(solve(text1, text2, m - 1, n, memo), solve(text1, text2, m, n - 1, memo));
        }
        return memo[m][n];
}
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> memo(m + 1, vector<int>(n + 1, -1));
        return solve(text1, text2, m, n, memo);
    }
};



//tabulation
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.size() + 1, vector<int>(text2.size() + 1));
        for (int i = 1; i <= text1.size(); i++) {
            for (int j = 1; j <= text2.size(); j++) {
                int ans = 0;
                if (text1[i - 1] == text2[j - 1]) {
                    ans = 1 + dp[i - 1][j - 1];
                } else {
                    int a = dp[i - 1][j];
                    int b = dp[i][j - 1];
                    ans = max(a, b);
                }
                dp[i][j] = ans;
            }
        }
        return dp[text1.size()][text2.size()];
    }
};



//bs
int lcs_dp(string text1, string text2)
{
    string dictText, sweepText;
    if (text1.length() > text2.length()) {
        dictText = text1;
        sweepText = text2;
    } else {
        dictText = text2;
        sweepText = text1;
    }
    unordered_map<char, vector<int>> dictOffsets;
    for (int i = 0; i < dictText.length(); ++i) {
        char c = dictText[i];
        dictOffsets[c].push_back(i);
    }
    vector<int> offsetAtLen = {-1};
    for (char c : sweepText) {
        if (dictOffsets.find(c) == dictOffsets.end())
            continue;
        int count_offsetAtLen = offsetAtLen.size();
        for (int subseq_len = count_offsetAtLen - 1; subseq_len >= 0; --subseq_len) { 
            const vector<int>& offset_list = dictOffsets[c];
            auto it = upper_bound(offset_list.begin(), offset_list.end(), offsetAtLen[subseq_len]);
            if (it == offset_list.end())
                continue;
            int match_offset = *it;
            if (offsetAtLen[subseq_len] <= match_offset) {
                if (subseq_len == count_offsetAtLen - 1)
                    offsetAtLen.push_back(match_offset); 
                else if (offsetAtLen[subseq_len + 1] > match_offset)
                    offsetAtLen[subseq_len + 1] = match_offset;
            }
        }
    }
    return offsetAtLen.size() - 1;
}
