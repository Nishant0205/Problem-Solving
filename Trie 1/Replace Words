struct Node
{
    char ch;
    Node* links[26];
    bool isTerminal;
    string word;

    Node(char ch)
    {
        this->ch = ch;
        isTerminal = false;
        for(int i=0; i<26; i++)
            links[i] = NULL;
        word = "";
    }
};

class Solution {
    Node* root = new Node(' ');
    void insert(string &word)
    {
        int n = word.size();
        Node* curr = root;
        for(int i = 0; i < n; i++)
        {
            if(curr -> links[word[i] - 'a'] == NULL)
                curr -> links[word[i] - 'a'] = new Node(word[i]); 
            curr = curr -> links[word[i] - 'a'];
        }
        curr->isTerminal = true;
        curr->word = word;
    }
    string search(string &word)
    {
        auto curr = root;
        int n=word.size();
        for(int i=0;i<n;i++){
            if(curr->isTerminal==true)
            return curr->word;

            int idx=word[i]-'a';

            if(curr->links[idx]==NULL)
            {
                return word;
            }

            curr=curr->links[idx];
        }

        return word;
   }
public:
    string replaceWords(vector<string>& dictionary, string sentence) {
        for(auto& word : dictionary)
            insert(word);
        vector<string> v;
        string temp="";
        for(int i=0; i<sentence.length(); i++)
        {
            if(sentence[i]==' ')
            {
                v.push_back(temp);
                temp = "";
                continue;
            }
            temp+=sentence[i];
        }
        v.push_back(temp);
        string ans = "";
        for(int i=0; i<v.size(); i++)
        {
            ans+=search(v[i]);
            ans.push_back(' ');
        }
        ans.pop_back();
        return ans;
    }
};
