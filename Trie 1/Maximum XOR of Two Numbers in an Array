struct Node {
    Node* links[2]; 
    Node()
    {
        links[0] = NULL;
        links[1] = NULL;
    }
    bool containsKey(int bit) {
        return (links[bit] != NULL); 
    }
    
    Node* get(int bit) {
        return links[bit]; 
    }

    void put(int bit, Node* node) {
        links[bit] = node; 
    }
};
class Solution {
    Node* root = new Node();
    void insert(int num) 
    {
        Node* node = root; 
        for (int i = 31; i >= 0; i--) 
        { 
            int bit = (num >> i) & 1; 
            if (!node->containsKey(bit)) 
                node->put(bit, new Node()); 
            node = node->get(bit); 
        }
    }

    int getMax(int num) 
    {
        Node* node = root;
        int maxNum = 0; 
        for (int i = 31; i >= 0; i--) 
        { 
            int bit = (num >> i) & 1; 
        
            if (node->containsKey(1 - bit)) { 
                maxNum |= (1 << i); 
                node = node->get(1 - bit);
            } 
            else {
                node = node->get(bit);
            }
        }
        return maxNum; 
    }
public:
    int findMaximumXOR(vector<int>& nums) {
        for(auto& num:nums)
            insert(num);
        
        int maxi = 0;
        
        for(auto& num:nums)
            maxi = max(maxi,getMax(num));
        
        return maxi;
    }
};
