void leftBoundary(TreeNode<int>* root, vector<int>& ans)
{
    if(root == NULL)
        return;
    if(root->left)
    {
        ans.push_back(root->data);
        leftBoundary(root->left, ans);
        
    }
    else if(root->right)
    {
        ans.push_back(root->data);
        leftBoundary(root->right, ans);
        
    }
}

void leaf(TreeNode<int>* root,vector<int>& ans)
{
    if(root == NULL)
        return;
    leaf(root->left,ans);
    if(root->left == NULL && root->right == NULL)
    {
        ans.push_back(root->data);
        return;
    }
    leaf(root->right,ans);
}
void rightBoundary(TreeNode<int>* root, vector<int>& ans)
{
    if(root == NULL)
        return;
    if(root->right)
    {
        rightBoundary(root->right, ans);
        ans.push_back(root->data);
    }
    else if(root->left)
    {
        rightBoundary(root->left, ans);
        ans.push_back(root->data);
    }
}
vector<int> traverseBoundary(TreeNode<int> *root)
{
    if(root == NULL)
        return {};
    vector<int> ans;
    ans.push_back(root->data);
    leftBoundary(root->left,ans);
    leaf(root->left,ans);
    leaf(root->right,ans);
    rightBoundary(root->right,ans);
    return ans;
}
