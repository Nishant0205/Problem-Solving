class Solution {
public:
    int ans = 0;
    struct TrieNode {
        int cnt, iidx;
        TrieNode* child[2];
        TrieNode(int c, int i) {
            cnt = c;
            iidx = i;
            child[0] = child[1] = NULL;
        }
    };

    public:
    int countTriplets(vector<int>& A) {
        int i, n = A.size();
        TrieNode* root = new TrieNode(-1, -1);
        int prexor[n+1];
        prexor[0] = 0;
        for(i=1;i<=n;i++) prexor[i]=A[i-1]^prexor[i-1];
        insert(root, 0, 0);
        for (i = 1; i <=n; i++) {
            find(root,prexor[i], i);
            insert(root,prexor[i], i);
        }
        return ans;
    }

    void find(TrieNode* root, int x, int index) {
        int i;
        TrieNode* temp = root;
        int bit = 0;
        for (i = 31; i >= 0; i--) {
            bit = 0;
            if ((x&(1<<i) ) > 0)
                bit = 1;
            if (temp->child[bit] == nullptr) {
                return;
            }
            else temp = temp->child[bit];
        }
        ans += (1L * temp->cnt * index - temp->iidx);
        temp->cnt = temp->cnt + 1;
        temp->iidx = temp->iidx + index + 1;
    }
    
    void insert(TrieNode* root, int x, int index) {
        int i;
        TrieNode* temp = root;
        int bit = 0;
        for (i = 31; i >= 0; i--) {
            bit = 0;
            if ((x & (1 << i)) > 0)
                bit = 1;
            if (temp->child[bit] == NULL) {
                TrieNode* node = new TrieNode(1, index + 1);
                temp->child[bit] = node;
            }
            temp = temp->child[bit];
        }
    }
};
