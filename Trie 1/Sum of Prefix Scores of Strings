struct Node
{
    Node* child[26];
    int count;
    Node()
    {
        count = 0;
        for(int i = 0; i < 26; i++)
            child[i] = NULL;
    }
};
class Solution {
    Node * root = new Node();
public:
    void insert(string str)
    {
        int n = str.size();
        Node* curr = root;
        for(int i = 0; i < n; i++)
        {
            if(curr -> child[str[i] - 'a'] == NULL)
                curr -> child[str[i] - 'a'] = new Node(); 
            curr -> child[str[i] - 'a'] -> count++;
            curr = curr -> child[str[i] - 'a'];
        }
    }
    
    int get_sum(string str)
    {
        int n = str.size();
        int sum = 0;    
        Node* curr = root;
        for(int i = 0; i < n; i++)
        {
            sum += curr -> child[str[i] - 'a'] -> count;
            curr = curr -> child[str[i] - 'a'];
        }
        return sum;
    }
    
    vector<int> sumPrefixScores(vector<string>& words) 
    {    
        int n = words.size();
        for(int i = 0; i < n; i++)
            insert(words[i]);
        
        vector<int> res(n, 0);

        for(int i = 0; i < n; i++)
            res[i] = get_sum(words[i]);
        
        return res;
    }
};
