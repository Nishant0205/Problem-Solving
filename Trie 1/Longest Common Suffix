class Node{
    public:
    bool flag=0;
    Node* links[26];
    int index=INT_MAX;
    int len=INT_MAX;
    Node()
    {
        for(auto& i:links)
            i=NULL;
    }
};
class Solution {
    Node* root = new Node();
    void insert(string& s,int ind)
    {
        Node* node  = root;
        for(auto i:s)
        {
            if(node->links[i-'a']==nullptr)
            node->links[i-'a'] = new Node();
            if(s.length()<node->links[i-'a']->len)
            {
                node->links[i-'a']->len = s.length();
                node->links[i-'a']->index = ind;
            }
            node  = node->links[i-'a'];
        }
        node->flag=1;
    }
    int search(string& word)
    {
        Node* node = root;
        for(auto i:word)
        {
            if(node->links[i-'a']==nullptr)return node->index;
            node = node->links[i-'a'];
        }
        return node->index;
    }

public:

    vector<int> stringIndices(vector<string>& wordsContainer, vector<string>& wordsQuery) {
        int mn = INT_MAX;
        int ind=-1;
        for(int i=0;i<wordsContainer.size();i++)
        {
            reverse(wordsContainer[i].begin(),wordsContainer[i].end());
            if(wordsContainer[i].length()<mn)
            {
                mn = wordsContainer[i].length();
                ind = i;
            }
            insert(wordsContainer[i],i);
        }
        vector<int>ans(wordsQuery.size(),-1);
        for(int i=0;i<wordsQuery.size();i++)
        {
            reverse(wordsQuery[i].begin(),wordsQuery[i].end());
            int t = search(wordsQuery[i]);
            ans[i] = t==INT_MAX?ind:t;
        }
        return ans;
    }
};
