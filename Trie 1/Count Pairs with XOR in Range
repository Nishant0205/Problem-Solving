struct Node {
    Node* links[2];
    int cnt = 0;
    void put(int ind, Node* node) 
    { 
        links[ind] = node;
    }
    bool isContains(int ind) 
    { 
        return links[ind] != NULL; 
    }
    Node* get(int ind) 
    { 
        return links[ind]; 
    }
    void incCount() 
    { 
        cnt++; 
    }
    int count() 
    { 
        return cnt; 
    }
};
class Solution {
    void insert(int num) {
        Node* node = root;
        for (int i = 14; i >= 0; i--) {
            int bit = ((num >> i) & 1);
            if (!node->isContains(bit)) {
                node->put(bit, new Node());
            }
            node = node->get(bit);
            node->incCount();
        }
    }
    int getCount(Node* root) {
        if (root == NULL)
            return 0;
        return root->count();
    }
    int rec(Node* root, int index, int high, int val) {
        if (root == NULL)
            return 0;
        if (index < 0)
            return root->count();
        int valBit = ((val >> index) & 1);
        int highBit = ((high >> index) & 1);
        if (valBit == 1) {
            if (highBit == 1)
                return rec(root->get(0), index - 1, high, val) +
                        getCount(root->get(1));
            else
                return rec(root->get(1), index - 1, high, val);
        } else {
            if (highBit == 1)
                return rec(root->get(1), index - 1, high, val) +
                        getCount(root->get(0));
            else
                return rec(root->get(0), index - 1, high, val);
        }
    }
public:
    Node* root = new Node();
    int countPairs(vector<int>& nums, int low, int high) {
        int ans = 0;
        for (auto& it : nums) {
            ans += rec(root, 14, high, it);
            ans -= rec(root, 14, low - 1, it);
            insert(it);
        }
        return ans;
    }
};
