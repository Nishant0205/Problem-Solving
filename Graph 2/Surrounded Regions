class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int n=board.size(),m=board[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        queue<pair<int,int>> q;

        for(int j=0; j<m; j++)
        {
            if(board[0][j]=='O'){
                q.push({0,j});
                vis[0][j]=1;
            }
            if(board[n-1][j] == 'O'){
                q.push({n-1,j});
                vis[n-1][j]=1;
            }
        }
        for(int j=0; j<n; j++)
        {
            if(board[j][0]=='O')
            {
                q.push({j,0});
                vis[j][0]=1;
            }
            if(board[j][m-1]== 'O'){
                q.push({j,m-1});
                vis[j][m-1]=1;
            }
        } 

        
        while(!q.empty()){
            auto [x,y]=q.front();
            q.pop();
            for(auto d:dir){
                int row=x+d[0];
                int col=y+d[1];

                if(row>=0 && row<n && col>=0 && col<m && board[row][col]=='O' && vis[row][col]==0){
                    vis[row][col]=1;
                    q.push({row,col});
                }
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==0 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
    }
};
